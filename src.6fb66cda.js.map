{"version":3,"sources":["src/webSerial.ts","src/ch55x.ts","src/index.js"],"names":["ch55x","Ch559Bootloader","progress","document","getElementById","loadFirmware","version","value","filePath","console","log","bin","fetch","then","r","headers","ok","arrayBuffer","innerHTML","Error","Uint8Array","verifyFirmware","u8array","verify","str","flashFirmware","flash","navigator","serial","error","onclick","innerText"],"mappings":"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","file":"src.6fb66cda.js","sourceRoot":"..","sourcesContent":["class WebSerial {\n  private receiveCallback: ((msg: Uint8Array) => void) | null = null;\n  private closeCallback: (() => void) | null = null;\n  private errorCallback: ((e: Error) => void) | null = null;\n\n  private port: SerialPort | null = null;\n  private writable: WritableStream | null = null;\n  private reader: ReadableStreamDefaultReader | null = null;\n\n  private _connected: boolean = false;\n  private _readloopRunning: boolean = false;\n  get connected() {\n    return this._connected;\n  }\n\n  constructor(\n    private send_chunk: number = 64,\n    private send_interval: number = 30\n  ) {}\n\n  setReceiveCallback(recvHandler: ((msg: Uint8Array) => void) | null) {\n    this.receiveCallback = recvHandler;\n  }\n  setErrorCallback(handler: (e: Error) => void | null) {\n    this.errorCallback = handler;\n  }\n  setCloseCallback(handler: () => void | null) {\n    this.errorCallback = handler;\n  }\n\n  async open(onConnect: () => void | null, baudrate: number = 115200) {\n    this.port = await navigator.serial.requestPort({\n      filters: [{ usbVendorId: 0xfeed, usbProductId: 0x9999 }],\n    });\n\n    try {\n      await this.port.open({ baudRate: baudrate, buffersize: 81920 });\n    } catch (e) {\n      await this.port.close();\n      return Promise.reject(e);\n    }\n\n    this._connected = true;\n    this._readloopRunning = false;\n\n    if (onConnect) {\n      onConnect();\n    }\n\n    // this.readLoop();\n\n    this.writable = this.port.writable;\n    console.log(\"open serial port\");\n  }\n\n  async startReadLoop() {\n    this.readLoop();\n    await this.sleep(1000);\n  }\n\n  private async readLoop() {\n    if (this.port == null) {\n      console.error(\"failed to read from serial port\");\n      return;\n    }\n\n    try {\n      this.reader = this.port.readable.getReader();\n      console.log(\"start read loop\");\n      for (;;) {\n        const { done, value } = await this.reader.read();\n\n        if (value) {\n          // console.log(`serial received: ${value.byteLength}byte`);\n\n          if (this.receiveCallback) {\n            this.receiveCallback(value);\n          }\n        }\n\n        if (done) {\n          console.log(\"Web serial read complete\", done);\n          if (this.reader) {\n            this.reader.releaseLock();\n          }\n\n          this._readloopRunning = false;\n\n          break;\n        }\n      }\n    } catch (e) {\n      this._readloopRunning = false;\n      console.error(e);\n      if (this.errorCallback) {\n        this.errorCallback(e);\n      }\n\n      await this.close();\n    }\n  }\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  async writeString(msg: string) {\n    await this.write(new TextEncoder().encode(msg));\n  }\n\n  async write(msg: Uint8Array) {\n    if (this.writable == null) {\n      return;\n    }\n\n    const writer = this.writable.getWriter();\n\n    for (let index = 0; index < msg.length; index += this.send_chunk) {\n      // console.log(\"serial send:\", msg.slice(index, index + this.send_chunk));\n      await writer.write(msg.slice(index, index + this.send_chunk));\n      await this.sleep(this.send_interval);\n    }\n\n    writer.releaseLock();\n  }\n\n  async close() {\n    if (this.reader) {\n      try {\n        await this.reader.cancel();\n        this.reader.releaseLock();\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.reader = null;\n      }\n    }\n\n    if (this.writable) {\n      // this.writable.abort();\n      this.writable = null;\n    }\n\n    if (this.closeCallback) {\n      this.closeCallback();\n    }\n\n    if (this.port) {\n      try {\n        await this.port.close();\n        this.port = null;\n        this._connected = false;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    console.log(\"serial port closed\");\n  }\n}\n\nexport { WebSerial };\n","import { WebSerial } from \"./webSerial\";\n\nconst PACKET_HEADER: number[] = [0x57, 0xab];\nconst DETECT_CMD: number[] = [\n  0xa1,\n  0x12,\n  0x00,\n  0x59,\n  0x11,\n  0x4d,\n  0x43,\n  0x55,\n  0x20,\n  0x49,\n  0x53,\n  0x50,\n  0x20,\n  0x26,\n  0x20,\n  0x57,\n  0x43,\n  0x48,\n  0x2e,\n  0x43,\n  0x4e,\n];\nconst RESET_CMD: number[] = [0xa2, 0x01, 0x00, 0x01];\nconst KEY_CMD_HEAD: number[] = [0xa3, 0x22, 0x00]; // 22 * [0x00]\nconst ERASE_CMD: number[] = [0xa4, 0x01, 0x00, 0x00];\nconst WRITE_CMD: number[] = [0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\nconst VERIFY_CMD: number[] = [0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\nconst READ_CFG_CMD: number[] = [0xa7, 0x02, 0x00, 0x1f, 0x00];\n\nconst PAGE_MAX: number = 60;\n\ntype OpType = \"write\" | \"verify\";\nclass Ch559Bootloader {\n  private comReceive: number[] = [];\n  private serial: WebSerial;\n\n  private dumpHex(arr: number[]): string {\n    return arr\n      .map((v) => {\n        return v.toString(16);\n      })\n      .join(\" \");\n  }\n\n  private sleep(ms: number) {\n    return new Promise((resolve: any) => setTimeout(resolve, ms));\n  }\n\n  private splitToChunk(arr: Uint8Array, size: number): number[][] {\n    let ret = [];\n    let i: number;\n    let j: number;\n    for (i = 0, j = arr.length; i < j; i += size) {\n      ret.push(arr.slice(i, i + size));\n    }\n\n    return ret;\n  }\n\n  private receiveResponse(arr: Uint8Array) {\n    this.comReceive = this.comReceive.concat(Array.from(arr));\n  }\n\n  private async readResponse(size: number, timeout: number): Promise<number[]> {\n    let cnt = 0;\n    while (this.comReceive.length < size && cnt < timeout) {\n      await this.sleep(1);\n      cnt += 1;\n    }\n\n    if (cnt >= timeout) {\n      return [];\n    }\n\n    let ret = this.comReceive.slice(0, size);\n    this.comReceive = this.comReceive.slice(size);\n\n    return ret;\n  }\n\n  private convertPayload(\n    payload: number[],\n    chksum: number,\n    devid: number\n  ): number[] {\n    return payload.map((v, index) => {\n      if (index % 8 == 0x07) {\n        return (v ^ ((chksum + devid) & 0xff)) & 0xff;\n      } else {\n        return (v ^ chksum) & 0xff;\n      }\n    });\n  }\n\n  private appendHeader(packet: number[]): number[] {\n    return PACKET_HEADER.concat(packet);\n  }\n\n  private appendCheckSum(packet: number[]): number[] {\n    return packet.concat(\n      (0x55 +\n        0xab +\n        packet.reduce((acc, cur) => {\n          return acc + cur;\n        })) &\n        0xff\n    );\n  }\n\n  private makeFlashCmd(\n    cmdheader: number[],\n    address: number,\n    remain: number,\n    payload: number[],\n    chksum: number,\n    devid: number\n  ) {\n    let cmd: number[] = Array.from(cmdheader);\n    cmd[1] = payload.length + 5;\n    cmd[3] = address & 0xff;\n    cmd[4] = (address >> 8) & 0xff;\n    cmd[7] = remain & 0xff;\n\n    cmd = cmd.concat(Array.from(this.convertPayload(payload, chksum, devid)));\n\n    cmd = this.appendCheckSum(cmd);\n    return this.appendHeader(cmd);\n  }\n\n  private makeFlashWriteCmd(\n    address: number,\n    remain: number,\n    payload: number[],\n    chksum: number,\n    devid: number\n  ) {\n    return this.makeFlashCmd(\n      WRITE_CMD,\n      address,\n      remain,\n      payload,\n      chksum,\n      devid\n    );\n  }\n\n  private makeVerifyCmd(\n    address: number,\n    remain: number,\n    payload: number[],\n    chksum: number,\n    devid: number\n  ) {\n    return this.makeFlashCmd(\n      VERIFY_CMD,\n      address,\n      remain,\n      payload,\n      chksum,\n      devid\n    );\n  }\n\n  private makeEraseCmd(len: number): number[] {\n    let cmd = ERASE_CMD;\n    let page_len = Math.floor((len + 1024 - 1) / 1024);\n\n    if (page_len > PAGE_MAX) {\n      throw new Error(\"Erase size is too large\");\n    }\n\n    cmd[3] = page_len;\n    cmd = this.appendCheckSum(cmd);\n    cmd = this.appendHeader(cmd);\n\n    return cmd;\n  }\n\n  private makeDetectCmd(): number[] {\n    let cmd = DETECT_CMD;\n    cmd = this.appendCheckSum(cmd);\n    cmd = this.appendHeader(cmd);\n\n    return cmd;\n  }\n\n  private makeReadCfgCmd(): number[] {\n    let cmd = READ_CFG_CMD;\n    cmd = this.appendCheckSum(cmd);\n    cmd = this.appendHeader(cmd);\n\n    return cmd;\n  }\n\n  private makeSendKeyCmd(): number[] {\n    let cmd = Array.from(KEY_CMD_HEAD).concat(Array(0x22).fill(0));\n    cmd = this.appendCheckSum(cmd);\n    cmd = this.appendHeader(cmd);\n\n    return cmd;\n  }\n\n  private async sendCommand(cmd: number[], rcv_len: number): Promise<number[]> {\n    await this.serial.write(Uint8Array.from(cmd));\n\n    let ret = await this.readResponse(rcv_len, 1000);\n\n    console.log(`Receive: ${this.dumpHex(ret)}`);\n\n    if (ret.length < rcv_len || ret[5] != 0) {\n      throw new Error(\"Command failed\");\n    }\n\n    return ret;\n  }\n\n  private async detect() {\n    let cmd = this.makeDetectCmd();\n\n    console.log(`Send detect: ${this.dumpHex(cmd)}`);\n\n    await this.sendCommand(cmd, 9);\n  }\n\n  private async getCfg(): Promise<{ version: string; checksum: number }> {\n    let cmd = this.makeReadCfgCmd();\n\n    console.log(`Send cfg: ${this.dumpHex(cmd)}`);\n\n    let ret = await this.sendCommand(cmd, 33);\n\n    let version = `ver${ret[21]}.${ret[22]}.${ret[23]}`;\n    let checksum =\n      ret.slice(24, 28).reduce((acc, cur) => {\n        return acc + cur;\n      }) & 0xff;\n\n    return { version, checksum };\n  }\n\n  private async eraseChip(size: number) {\n    let cmd = this.makeEraseCmd(size);\n\n    console.log(`Send erase: ${this.dumpHex(cmd)}`);\n\n    await this.sendCommand(cmd, 9);\n  }\n\n  private async sendKey() {\n    let cmd = this.makeSendKeyCmd();\n\n    console.log(`Send key: ${this.dumpHex(cmd)}`);\n\n    await this.sendCommand(cmd, 9);\n  }\n\n  private async opBinFile(\n    bin: Uint8Array,\n    op: OpType,\n    checksum: number,\n    devid: number,\n    onProgress: ((addr: number, remains: number) => void) | null = null\n  ) {\n    let chunks = this.splitToChunk(bin, 56);\n    let addr = 0;\n    let remains = bin.length;\n\n    for (let chunk of chunks) {\n      if (chunk.length < 56) {\n        chunk = Array.from(chunk).concat(Array(56 - chunk.length).fill(0xff));\n      }\n\n      let cmd: number[];\n      if (op === \"write\") {\n        cmd = this.makeFlashWriteCmd(addr, remains, chunk, checksum, devid);\n      } else if (op === \"verify\") {\n        cmd = this.makeVerifyCmd(addr, remains, chunk, checksum, devid);\n      } else {\n        throw new Error(`Unknown operation :${op}`);\n      }\n\n      addr += chunk.length;\n      remains = remains - chunk.length;\n\n      console.log(`Send ${op}: ${this.dumpHex(cmd)}`);\n\n      // Receive response\n      let ret = await this.sendCommand(cmd, 9);\n\n      if (ret[6] != 0) {\n        throw new Error(`${op} failed address 0x${addr.toString(16)}`);\n      }\n\n      if (onProgress != null) {\n        onProgress(addr, remains);\n      }\n    }\n  }\n\n  private async openPort() {\n    this.serial = new WebSerial(128, 5);\n    this.serial.setReceiveCallback(this.receiveResponse.bind(this));\n    await this.serial.open(null, 57600);\n    this.serial.startReadLoop();\n  }\n\n  private async initBootloader(): Promise<{\n    version: string;\n    checksum: number;\n  }> {\n    await this.detect();\n    let { version, checksum } = await this.getCfg();\n    console.log(`Ch55x version ${version}, checksum ${checksum}`);\n\n    return { version: version, checksum: checksum };\n  }\n\n  async flash(bin: Uint8Array, progress: (msg: string) => void = () => {}) {\n    await this.openPort();\n\n    try {\n      let cfg = await this.initBootloader();\n\n      await this.eraseChip(bin.length);\n\n      await this.sendKey();\n\n      progress(\"write start.\\n\");\n\n      await this.opBinFile(bin, \"write\", cfg.checksum, 0x59, (_a, _b) => {\n        progress(\".\");\n      });\n\n      progress(\"write complete.\\n\");\n\n      await this.sendKey();\n\n      progress(\"verify start.\\n\");\n\n      await this.opBinFile(bin, \"verify\", cfg.checksum, 0x59, (_a, _b) => {\n        progress(\".\");\n      });\n\n      progress(\"verify complete.\\n\");\n    } catch (e) {\n      progress(\"\\n\" + e.toString() + \"\\n\");\n      progress(\"Flash failed.\\n\");\n    } finally {\n      await this.serial.close();\n    }\n  }\n\n  async verify(bin: Uint8Array, progress: (msg: string) => void = () => {}) {\n    await this.openPort();\n\n    try {\n      let cfg = await this.initBootloader();\n\n      await this.sendKey();\n\n      progress(\"verify start.\\n\");\n\n      await this.opBinFile(bin, \"verify\", cfg.checksum, 0x59, (_a, _b) => {\n        progress(\".\");\n      });\n\n      progress(\"verify complete.\\n\");\n    } catch (e) {\n      progress(\"\\n\" + e.toString() + \"\\n\");\n      progress(\"Verify failed.\\n\");\n    } finally {\n      await this.serial.close();\n    }\n  }\n}\n\nexport { Ch559Bootloader };\n","import { WebSerial } from \"./webSerial\";\nimport { Ch559Bootloader } from \"./ch55x\";\n\nconst ch55x = new Ch559Bootloader();\n\nlet progress = document.getElementById(\"progress\");\n\nif (!navigator.serial) {\n  progress.innerHTML =\n    \"Web serial is unavailable.\\nPlease use Google Chrome or Chromium Edge\\n\";\n  console.error(\"Web serial is unavailable\");\n}\n\nasync function loadFirmware() {\n  const version = document.getElementById(\"version\").value;\n  const filePath = `./CH559USB_${version}.bin`;\n  console.log(`Load ${filePath}`);\n\n  let bin = await fetch(filePath).then((r) => {\n    console.log(r.headers);\n    if (r.ok) {\n      return r.arrayBuffer();\n    } else {\n      progress.innerHTML = \"File not found\";\n      throw new Error(\"File not found\\n\");\n    }\n  });\n  return new Uint8Array(bin);\n}\n\nasync function verifyFirmware() {\n  let u8array = await loadFirmware();\n\n  progress.innerHTML =\n    \"Connect Keyboard Quantizer with bootloader keymap, and select serial port appreared.\\n\";\n\n  await ch55x.verify(u8array, (str) => {\n    progress.innerHTML += str;\n  });\n}\n\nasync function flashFirmware() {\n  let u8array = await loadFirmware();\n\n  progress.innerHTML =\n    \"Connect Keyboard Quantizer with bootloader keymap, and select serial port appreared.\\n\";\n\n  await ch55x.flash(u8array, (str) => {\n    progress.innerHTML += str;\n  });\n}\n\ndocument.getElementById(\"verify\").onclick = verifyFirmware;\ndocument.getElementById(\"flash\").onclick = flashFirmware;\ndocument.getElementById(\n  \"revision\"\n).innerText = `Revision:${process.env.REVISION}`;\n"]}